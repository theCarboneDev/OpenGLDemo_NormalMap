#version 330 core
out vec4 FragColor;
in vec2 TexCoord;
in vec3 WorldPos;
in vec3 Normal;

uniform vec3 viewPos;

uniform sampler2D normalTex;
uniform sampler2D metallicTex;
uniform sampler2D roughnessTex;
uniform sampler2D aoTex;
uniform sampler2D albedoTex;

uniform samplerCube irrMap;
uniform samplerCube prefilterMap;
uniform sampler2D brdfLUT;

uniform vec3 lightPos[4];
uniform vec3 lightColor[4];

uniform int isLight;

const float PI = 3.14159265359;

//easy trick to get tangent-normals to world-space to keep PBR code simplified, not as preformant
vec3 getNormalFromMap()
{
    vec3 tangentNormal = texture(normalTex, TexCoord).xyz * 2.0 - 1.0;

    vec3 Q1  = dFdx(WorldPos);
    vec3 Q2  = dFdy(WorldPos);
    vec2 st1 = dFdx(TexCoord);
    vec2 st2 = dFdy(TexCoord);

    vec3 N   = normalize(Normal);
    vec3 T  = normalize(Q1*st2.t - Q2*st1.t);
    vec3 B  = -normalize(cross(N, T));
    mat3 TBN = mat3(T, B, N);

    return normalize(TBN * tangentNormal);
}
//This functions calculates the normal distrubution
float DistributionGGX(vec3 N, vec3 H, float roughness){
    float a = roughness * roughness;
    float NdotH = max(dot(N,H),0.0);
    float NdotH2 = NdotH*NdotH;

    float num = a*a;
    float demon = (NdotH2 * (num - 1.0) + 1.0);
    demon = PI * demon * demon;

    return num / demon;
}
//These two calculate the geometry
float GeometrySchlick(float NdotV, float roughness){
    float r = roughness+1.0;
    float k = (roughness*roughness)/8.0;

    float num = NdotV;
    float demon = NdotV * (1.0 - k) + k;

    return num / demon;
}
float GeometrySmith(vec3 N, vec3 V, vec3 L, float roughness){
    float NdotV = max(dot(N,V), 0.0);
    float NdotL = max(dot(N,L), 0.0);
    float ggx2 = GeometrySchlick(NdotV, roughness);
    float ggx1 = GeometrySchlick(NdotL, roughness);

    return ggx2*ggx1;
}
//returns how much the surface should reflect or refract based on angle
vec3 fresnalSchlick(float cosTheta, vec3 F0){
    return F0 + (1.0 - F0) * pow(clamp(1.0 - cosTheta, 0.0, 1.0), 5.0);
}
vec3 fresnelSchlickRoughness(float cosTheta, vec3 F0, float roughness)
{
    return F0 + (max(vec3(1.0 - roughness), F0) - F0) * pow(clamp(1.0 - cosTheta, 0.0, 1.0), 5.0);
}   

void main(){
    if(isLight != -1){    
        FragColor = vec4(lightColor[isLight], 0.0);
    }
    else{
    vec3 albedo = texture(albedoTex, TexCoord).rgb;
    vec3 normal = getNormalFromMap();
    float metallic = texture(metallicTex, TexCoord).r;
    float roughness = texture(roughnessTex, TexCoord).r;
    float ao = texture(aoTex, TexCoord).r;

    vec3 N = normalize(normal);
    vec3 V = normalize(viewPos - WorldPos);
    vec3 R = reflect(-V, N);

    vec3 lo = vec3(0.0);
    //reflectance
    vec3 F0 = vec3(0.04);
    F0 = mix(F0, albedo, metallic);
    for(int i = 0; i < 4; i++){
        //per light radience
        vec3 L = normalize(lightPos[i] - WorldPos);
        vec3 H = normalize(V+L);
        float distance = length(lightPos[i] - WorldPos);
        float attenuation = 1.0 / (distance * distance);
        vec3 radience = lightColor[i] * attenuation;

        //cook-torrance
        vec3 F = fresnalSchlick(max(dot(H, V), 0.0), F0);
        float NDF = DistributionGGX(N, H, roughness);
        float G = GeometrySmith(N, V, L, roughness);

        vec3 numerator = NDF * G * F;
        float denominator = 4.0 * max(dot(N,V),0.0)*max(dot(N,L),0.0)+0.00001;
        vec3 specular = numerator / denominator;

        vec3 kS = F;
        vec3 kD = vec3(1.0) - kS;

        kD *= 1.0 - metallic;

        //add to outgoing light
        float NdotL = max(dot(N,L),0.0);
        lo += (kD * albedo / PI + specular) * NdotL * radience;
    }
    vec3 F = fresnelSchlickRoughness(max(dot(N, V), 0.0), F0, roughness);
    vec3 kS = F;
    vec3 kD = 1.0 - kS;
    kD *= 1.0 - metallic;

    vec3 irradiance = texture(irrMap, N).rgb;
    vec3 diffuse = irradiance * albedo;

    const float MAX_REFLECTION_LOD = 4.0;
    vec3 prefilteredColor = textureLod(prefilterMap, R,  roughness * MAX_REFLECTION_LOD).rgb;    
    vec2 brdf  = texture(brdfLUT, vec2(max(dot(N, V), 0.0), roughness)).rg;
    vec3 specular = prefilteredColor * (F * (brdf.x + brdf.y));

    vec3 ambient = (kD * diffuse + specular) * ao;

    vec3 color = ambient + lo;

    color = color / (color + vec3(1.0));
    color = pow(color, vec3(1.0/2.2));
    FragColor = vec4(color,1.0);
    }
}
