#version 330 core
layout (location = 0) out vec4 FragColor;
layout (location = 1) out vec4 BrightColor;

in VS_OUT{
    vec3 FragPos;
    vec2 TexCoord;
    vec3 Normal;
    vec3 TangentLightPos;
    vec3 TangentViewPos;
    vec3 TangentFragPos;
} fs_in;

uniform sampler2D texture1;
uniform sampler2D normal_texture;
uniform sampler2D disp_texture;

uniform float height_scale;
uniform float light_strength;

vec2 parallaxMapping(vec2 TexCoord, vec3 viewDir){
    const float minLayers = 8;
    const float maxLayers = 32;
    float numLayers = mix(maxLayers, minLayers, max(dot(vec3(0.0,0.0,1.0), viewDir), 0.0));

    float layerDepth = 1 / numLayers;

    float currentLayerDepth = 0.0;

    vec2 P = viewDir.xy * height_scale;
    vec2 deltaTexCoord = P / numLayers;

    vec2 currentTexCoord = TexCoord;
    float currentDepthMap = texture(disp_texture, currentTexCoord).r;

    while(currentLayerDepth < currentDepthMap){
        currentTexCoord -= deltaTexCoord;
        currentDepthMap = texture(disp_texture, currentTexCoord).r;
        currentLayerDepth += layerDepth;
    }

    vec2 prevTexCoord = currentTexCoord + deltaTexCoord;

    float afterDepth = currentDepthMap - currentLayerDepth;
    float beforeDepth = texture(disp_texture, prevTexCoord).r - currentLayerDepth + layerDepth;

    float weight = afterDepth / (beforeDepth-afterDepth);
    vec2 finalTexCoord = prevTexCoord * weight + currentTexCoord * (1.0-weight);

    return finalTexCoord;
}

void main(){
    vec3 viewDir = normalize(fs_in.TangentViewPos - fs_in.TangentFragPos);
    vec2 texCoord = parallaxMapping(fs_in.TexCoord, viewDir);
    if(texCoord.x > 1.0 || texCoord.y > 1.0 || texCoord.x < 0.0 || texCoord.y < 0.0){
        discard;
    }

    vec3 color = texture(texture1, texCoord).rgb;

    vec3 norm = texture(normal_texture, texCoord).rgb;

    norm = normalize(norm * 2.0 - 1.0);

    vec3 ambient = color * 0.0063;

    vec3 lightDir = normalize(fs_in.TangentLightPos - fs_in.TangentFragPos);
    float diff = max(dot(norm, lightDir), 0.0);
    vec3 diffuse = color * diff * light_strength;

    vec3 halfwayDir = normalize(viewDir + lightDir);
    float spec = pow(max(dot(norm, halfwayDir), 0.0), 32.0);
    vec3 specular = color * spec * light_strength;

    FragColor = vec4(ambient+diffuse+specular, 1.0);

    vec3 mapped = vec3(1.0) - exp(-FragColor.rgb * 1.0);
    float brightness = (mapped.r+mapped.g+mapped.b)/3.0;
    BrightColor = brightness > 1.0 ? vec4(mapped.rgb, 1.0) : vec4(0.0,0.0,0.0,1.0);
}
